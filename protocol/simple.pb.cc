// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: simple.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "simple.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace lol {

namespace {

const ::google::protobuf::Descriptor* MSvrInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MSvrInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SSRegisterSvr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SSRegisterSvr_reflection_ = NULL;
const ::google::protobuf::Descriptor* MMachineInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MMachineInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SSLogin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SSLogin_reflection_ = NULL;
const ::google::protobuf::Descriptor* SaveRoleData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SaveRoleData_reflection_ = NULL;
const ::google::protobuf::Descriptor* Db2GameLogin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Db2GameLogin_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CSProtocol_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ESvrType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_simple_2eproto() {
  protobuf_AddDesc_simple_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "simple.proto");
  GOOGLE_CHECK(file != NULL);
  MSvrInfo_descriptor_ = file->message_type(0);
  static const int MSvrInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSvrInfo, svrtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSvrInfo, svrindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSvrInfo, strip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSvrInfo, svrport_),
  };
  MSvrInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MSvrInfo_descriptor_,
      MSvrInfo::default_instance_,
      MSvrInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSvrInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSvrInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MSvrInfo));
  SSRegisterSvr_descriptor_ = file->message_type(1);
  static const int SSRegisterSvr_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSRegisterSvr, svrinfo_),
  };
  SSRegisterSvr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SSRegisterSvr_descriptor_,
      SSRegisterSvr::default_instance_,
      SSRegisterSvr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSRegisterSvr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSRegisterSvr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SSRegisterSvr));
  MMachineInfo_descriptor_ = file->message_type(2);
  static const int MMachineInfo_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MMachineInfo, os_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MMachineInfo, platform_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MMachineInfo, language_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MMachineInfo, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MMachineInfo, udid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MMachineInfo, devicemodel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MMachineInfo, devicesys_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MMachineInfo, deviceram_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MMachineInfo, ip_),
  };
  MMachineInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MMachineInfo_descriptor_,
      MMachineInfo::default_instance_,
      MMachineInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MMachineInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MMachineInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MMachineInfo));
  SSLogin_descriptor_ = file->message_type(3);
  static const int SSLogin_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSLogin, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSLogin, gs_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSLogin, breconnect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSLogin, netid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSLogin, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSLogin, gateline_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSLogin, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSLogin, machineinfo_),
  };
  SSLogin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SSLogin_descriptor_,
      SSLogin::default_instance_,
      SSLogin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSLogin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSLogin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SSLogin));
  SaveRoleData_descriptor_ = file->message_type(4);
  static const int SaveRoleData_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveRoleData, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveRoleData, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveRoleData, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveRoleData, rolename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveRoleData, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveRoleData, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveRoleData, viplevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveRoleData, vipexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveRoleData, diamond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveRoleData, logintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveRoleData, offlinetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveRoleData, herobag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveRoleData, itembag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveRoleData, gamecopy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveRoleData, task_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveRoleData, gameshop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveRoleData, groupdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveRoleData, gsid_),
  };
  SaveRoleData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SaveRoleData_descriptor_,
      SaveRoleData::default_instance_,
      SaveRoleData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveRoleData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveRoleData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SaveRoleData));
  Db2GameLogin_descriptor_ = file->message_type(5);
  static const int Db2GameLogin_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Db2GameLogin, roledata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Db2GameLogin, netid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Db2GameLogin, gateline_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Db2GameLogin, reconnect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Db2GameLogin, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Db2GameLogin, machineinfo_),
  };
  Db2GameLogin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Db2GameLogin_descriptor_,
      Db2GameLogin::default_instance_,
      Db2GameLogin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Db2GameLogin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Db2GameLogin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Db2GameLogin));
  CSProtocol_descriptor_ = file->enum_type(0);
  ESvrType_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_simple_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MSvrInfo_descriptor_, &MSvrInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SSRegisterSvr_descriptor_, &SSRegisterSvr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MMachineInfo_descriptor_, &MMachineInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SSLogin_descriptor_, &SSLogin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SaveRoleData_descriptor_, &SaveRoleData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Db2GameLogin_descriptor_, &Db2GameLogin::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_simple_2eproto() {
  delete MSvrInfo::default_instance_;
  delete MSvrInfo_reflection_;
  delete SSRegisterSvr::default_instance_;
  delete SSRegisterSvr_reflection_;
  delete MMachineInfo::default_instance_;
  delete MMachineInfo_reflection_;
  delete SSLogin::default_instance_;
  delete SSLogin_reflection_;
  delete SaveRoleData::default_instance_;
  delete SaveRoleData_reflection_;
  delete Db2GameLogin::default_instance_;
  delete Db2GameLogin_reflection_;
}

void protobuf_AddDesc_simple_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014simple.proto\022\003lol\"\\\n\010MSvrInfo\022\036\n\007svrTy"
    "pe\030\001 \001(\0162\r.lol.ESvrType\022\020\n\010svrIndex\030\002 \001("
    "\r\022\r\n\005strIp\030\003 \001(\t\022\017\n\007svrPort\030\004 \001(\r\"/\n\rSSR"
    "egisterSvr\022\036\n\007svrInfo\030\001 \001(\0132\r.lol.MSvrIn"
    "fo\"\243\001\n\014MMachineInfo\022\n\n\002os\030\001 \001(\r\022\020\n\010platf"
    "orm\030\002 \001(\t\022\020\n\010language\030\003 \001(\t\022\016\n\006userId\030\004 "
    "\001(\t\022\014\n\004udid\030\005 \001(\t\022\023\n\013deviceModel\030\006 \001(\t\022\021"
    "\n\tdeviceSys\030\007 \001(\t\022\021\n\tdeviceRam\030\010 \001(\r\022\n\n\002"
    "ip\030\t \001(\t\"\251\001\n\007SSLogin\022\017\n\007account\030\001 \001(\t\022\r\n"
    "\005gs_id\030\002 \001(\005\022\022\n\nbReConnect\030\003 \001(\r\022\r\n\005netI"
    "d\030\004 \001(\r\022\020\n\010playerId\030\005 \001(\004\022\020\n\010gateLine\030\006 "
    "\001(\r\022\017\n\007channel\030\007 \001(\r\022&\n\013machineInfo\030\010 \001("
    "\0132\021.lol.MMachineInfo\"\310\002\n\014SaveRoleData\022\020\n"
    "\010playerId\030\001 \001(\004\022\017\n\007account\030\002 \001(\t\022\r\n\005leve"
    "l\030\003 \001(\r\022\020\n\010roleName\030\004 \001(\t\022\020\n\010nickName\030\005 "
    "\001(\t\022\022\n\ncreateTime\030\006 \001(\003\022\020\n\010vipLevel\030\007 \001("
    "\r\022\016\n\006vipExp\030\010 \001(\r\022\017\n\007diamond\030\t \001(\r\022\021\n\tlo"
    "ginTime\030\n \001(\003\022\023\n\013offlineTime\030\013 \001(\003\022\017\n\007he"
    "roBag\030\014 \001(\014\022\017\n\007itemBag\030\r \001(\014\022\020\n\010gameCopy"
    "\030\016 \001(\014\022\014\n\004task\030\017 \001(\014\022\020\n\010gameShop\030\020 \001(\014\022\021"
    "\n\tgroupData\030\021 \001(\014\022\014\n\004gsId\030\022 \001(\r\"\240\001\n\014Db2G"
    "ameLogin\022#\n\010roleData\030\001 \001(\0132\021.lol.SaveRol"
    "eData\022\r\n\005netId\030\002 \001(\r\022\020\n\010gateLine\030\003 \001(\r\022\021"
    "\n\treconnect\030\004 \001(\r\022\017\n\007channel\030\005 \001(\r\022&\n\013ma"
    "chineInfo\030\006 \001(\0132\021.lol.MMachineInfo*R\n\nCS"
    "Protocol\022\020\n\013REGISTERSVR\020\240\037\022\030\n\022SVR_GAME2D"
    "B_LOGIN2\020\372\377\003\022\030\n\022SVR_DB2GAME_LOGIN2\020\373\377\003*q"
    "\n\010ESvrType\022\r\n\tESVR_NONE\020\000\022\r\n\tESVR_GAME\020\001"
    "\022\017\n\013ESVR_CENTER\020\002\022\r\n\tESVR_GATE\020\003\022\r\n\tESVR"
    "_MAIL\020\004\022\013\n\007ESVR_DB\020\005\022\013\n\007ESVR_GM\020\006", 1193);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "simple.proto", &protobuf_RegisterTypes);
  MSvrInfo::default_instance_ = new MSvrInfo();
  SSRegisterSvr::default_instance_ = new SSRegisterSvr();
  MMachineInfo::default_instance_ = new MMachineInfo();
  SSLogin::default_instance_ = new SSLogin();
  SaveRoleData::default_instance_ = new SaveRoleData();
  Db2GameLogin::default_instance_ = new Db2GameLogin();
  MSvrInfo::default_instance_->InitAsDefaultInstance();
  SSRegisterSvr::default_instance_->InitAsDefaultInstance();
  MMachineInfo::default_instance_->InitAsDefaultInstance();
  SSLogin::default_instance_->InitAsDefaultInstance();
  SaveRoleData::default_instance_->InitAsDefaultInstance();
  Db2GameLogin::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_simple_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_simple_2eproto {
  StaticDescriptorInitializer_simple_2eproto() {
    protobuf_AddDesc_simple_2eproto();
  }
} static_descriptor_initializer_simple_2eproto_;
const ::google::protobuf::EnumDescriptor* CSProtocol_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSProtocol_descriptor_;
}
bool CSProtocol_IsValid(int value) {
  switch(value) {
    case 4000:
    case 65530:
    case 65531:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ESvrType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ESvrType_descriptor_;
}
bool ESvrType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int MSvrInfo::kSvrTypeFieldNumber;
const int MSvrInfo::kSvrIndexFieldNumber;
const int MSvrInfo::kStrIpFieldNumber;
const int MSvrInfo::kSvrPortFieldNumber;
#endif  // !_MSC_VER

MSvrInfo::MSvrInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MSvrInfo::InitAsDefaultInstance() {
}

MSvrInfo::MSvrInfo(const MSvrInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MSvrInfo::SharedCtor() {
  _cached_size_ = 0;
  svrtype_ = 0;
  svrindex_ = 0u;
  strip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  svrport_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MSvrInfo::~MSvrInfo() {
  SharedDtor();
}

void MSvrInfo::SharedDtor() {
  if (strip_ != &::google::protobuf::internal::kEmptyString) {
    delete strip_;
  }
  if (this != default_instance_) {
  }
}

void MSvrInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MSvrInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MSvrInfo_descriptor_;
}

const MSvrInfo& MSvrInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_simple_2eproto();
  return *default_instance_;
}

MSvrInfo* MSvrInfo::default_instance_ = NULL;

MSvrInfo* MSvrInfo::New() const {
  return new MSvrInfo;
}

void MSvrInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    svrtype_ = 0;
    svrindex_ = 0u;
    if (has_strip()) {
      if (strip_ != &::google::protobuf::internal::kEmptyString) {
        strip_->clear();
      }
    }
    svrport_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MSvrInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .lol.ESvrType svrType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::lol::ESvrType_IsValid(value)) {
            set_svrtype(static_cast< ::lol::ESvrType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_svrIndex;
        break;
      }

      // optional uint32 svrIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_svrIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &svrindex_)));
          set_has_svrindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_strIp;
        break;
      }

      // optional string strIp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strIp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strip().data(), this->strip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_svrPort;
        break;
      }

      // optional uint32 svrPort = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_svrPort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &svrport_)));
          set_has_svrport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MSvrInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .lol.ESvrType svrType = 1;
  if (has_svrtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->svrtype(), output);
  }

  // optional uint32 svrIndex = 2;
  if (has_svrindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->svrindex(), output);
  }

  // optional string strIp = 3;
  if (has_strip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strip().data(), this->strip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->strip(), output);
  }

  // optional uint32 svrPort = 4;
  if (has_svrport()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->svrport(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MSvrInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .lol.ESvrType svrType = 1;
  if (has_svrtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->svrtype(), target);
  }

  // optional uint32 svrIndex = 2;
  if (has_svrindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->svrindex(), target);
  }

  // optional string strIp = 3;
  if (has_strip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strip().data(), this->strip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->strip(), target);
  }

  // optional uint32 svrPort = 4;
  if (has_svrport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->svrport(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MSvrInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .lol.ESvrType svrType = 1;
    if (has_svrtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->svrtype());
    }

    // optional uint32 svrIndex = 2;
    if (has_svrindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->svrindex());
    }

    // optional string strIp = 3;
    if (has_strip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strip());
    }

    // optional uint32 svrPort = 4;
    if (has_svrport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->svrport());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MSvrInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MSvrInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MSvrInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MSvrInfo::MergeFrom(const MSvrInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_svrtype()) {
      set_svrtype(from.svrtype());
    }
    if (from.has_svrindex()) {
      set_svrindex(from.svrindex());
    }
    if (from.has_strip()) {
      set_strip(from.strip());
    }
    if (from.has_svrport()) {
      set_svrport(from.svrport());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MSvrInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSvrInfo::CopyFrom(const MSvrInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSvrInfo::IsInitialized() const {

  return true;
}

void MSvrInfo::Swap(MSvrInfo* other) {
  if (other != this) {
    std::swap(svrtype_, other->svrtype_);
    std::swap(svrindex_, other->svrindex_);
    std::swap(strip_, other->strip_);
    std::swap(svrport_, other->svrport_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MSvrInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MSvrInfo_descriptor_;
  metadata.reflection = MSvrInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SSRegisterSvr::kSvrInfoFieldNumber;
#endif  // !_MSC_VER

SSRegisterSvr::SSRegisterSvr()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SSRegisterSvr::InitAsDefaultInstance() {
  svrinfo_ = const_cast< ::lol::MSvrInfo*>(&::lol::MSvrInfo::default_instance());
}

SSRegisterSvr::SSRegisterSvr(const SSRegisterSvr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SSRegisterSvr::SharedCtor() {
  _cached_size_ = 0;
  svrinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SSRegisterSvr::~SSRegisterSvr() {
  SharedDtor();
}

void SSRegisterSvr::SharedDtor() {
  if (this != default_instance_) {
    delete svrinfo_;
  }
}

void SSRegisterSvr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SSRegisterSvr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SSRegisterSvr_descriptor_;
}

const SSRegisterSvr& SSRegisterSvr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_simple_2eproto();
  return *default_instance_;
}

SSRegisterSvr* SSRegisterSvr::default_instance_ = NULL;

SSRegisterSvr* SSRegisterSvr::New() const {
  return new SSRegisterSvr;
}

void SSRegisterSvr::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_svrinfo()) {
      if (svrinfo_ != NULL) svrinfo_->::lol::MSvrInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SSRegisterSvr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .lol.MSvrInfo svrInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svrinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SSRegisterSvr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .lol.MSvrInfo svrInfo = 1;
  if (has_svrinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->svrinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SSRegisterSvr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .lol.MSvrInfo svrInfo = 1;
  if (has_svrinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->svrinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SSRegisterSvr::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .lol.MSvrInfo svrInfo = 1;
    if (has_svrinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svrinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SSRegisterSvr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SSRegisterSvr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SSRegisterSvr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SSRegisterSvr::MergeFrom(const SSRegisterSvr& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_svrinfo()) {
      mutable_svrinfo()->::lol::MSvrInfo::MergeFrom(from.svrinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SSRegisterSvr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SSRegisterSvr::CopyFrom(const SSRegisterSvr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSRegisterSvr::IsInitialized() const {

  return true;
}

void SSRegisterSvr::Swap(SSRegisterSvr* other) {
  if (other != this) {
    std::swap(svrinfo_, other->svrinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SSRegisterSvr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SSRegisterSvr_descriptor_;
  metadata.reflection = SSRegisterSvr_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MMachineInfo::kOsFieldNumber;
const int MMachineInfo::kPlatformFieldNumber;
const int MMachineInfo::kLanguageFieldNumber;
const int MMachineInfo::kUserIdFieldNumber;
const int MMachineInfo::kUdidFieldNumber;
const int MMachineInfo::kDeviceModelFieldNumber;
const int MMachineInfo::kDeviceSysFieldNumber;
const int MMachineInfo::kDeviceRamFieldNumber;
const int MMachineInfo::kIpFieldNumber;
#endif  // !_MSC_VER

MMachineInfo::MMachineInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MMachineInfo::InitAsDefaultInstance() {
}

MMachineInfo::MMachineInfo(const MMachineInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MMachineInfo::SharedCtor() {
  _cached_size_ = 0;
  os_ = 0u;
  platform_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  language_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  udid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  devicemodel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  devicesys_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  deviceram_ = 0u;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MMachineInfo::~MMachineInfo() {
  SharedDtor();
}

void MMachineInfo::SharedDtor() {
  if (platform_ != &::google::protobuf::internal::kEmptyString) {
    delete platform_;
  }
  if (language_ != &::google::protobuf::internal::kEmptyString) {
    delete language_;
  }
  if (userid_ != &::google::protobuf::internal::kEmptyString) {
    delete userid_;
  }
  if (udid_ != &::google::protobuf::internal::kEmptyString) {
    delete udid_;
  }
  if (devicemodel_ != &::google::protobuf::internal::kEmptyString) {
    delete devicemodel_;
  }
  if (devicesys_ != &::google::protobuf::internal::kEmptyString) {
    delete devicesys_;
  }
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void MMachineInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MMachineInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MMachineInfo_descriptor_;
}

const MMachineInfo& MMachineInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_simple_2eproto();
  return *default_instance_;
}

MMachineInfo* MMachineInfo::default_instance_ = NULL;

MMachineInfo* MMachineInfo::New() const {
  return new MMachineInfo;
}

void MMachineInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    os_ = 0u;
    if (has_platform()) {
      if (platform_ != &::google::protobuf::internal::kEmptyString) {
        platform_->clear();
      }
    }
    if (has_language()) {
      if (language_ != &::google::protobuf::internal::kEmptyString) {
        language_->clear();
      }
    }
    if (has_userid()) {
      if (userid_ != &::google::protobuf::internal::kEmptyString) {
        userid_->clear();
      }
    }
    if (has_udid()) {
      if (udid_ != &::google::protobuf::internal::kEmptyString) {
        udid_->clear();
      }
    }
    if (has_devicemodel()) {
      if (devicemodel_ != &::google::protobuf::internal::kEmptyString) {
        devicemodel_->clear();
      }
    }
    if (has_devicesys()) {
      if (devicesys_ != &::google::protobuf::internal::kEmptyString) {
        devicesys_->clear();
      }
    }
    deviceram_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MMachineInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 os = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &os_)));
          set_has_os();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_platform;
        break;
      }

      // optional string platform = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_platform:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_platform()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->platform().data(), this->platform().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_language;
        break;
      }

      // optional string language = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_language:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_language()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->language().data(), this->language().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_userId;
        break;
      }

      // optional string userId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_udid;
        break;
      }

      // optional string udid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_udid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_udid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->udid().data(), this->udid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_deviceModel;
        break;
      }

      // optional string deviceModel = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_deviceModel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_devicemodel()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->devicemodel().data(), this->devicemodel().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_deviceSys;
        break;
      }

      // optional string deviceSys = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_deviceSys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_devicesys()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->devicesys().data(), this->devicesys().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_deviceRam;
        break;
      }

      // optional uint32 deviceRam = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_deviceRam:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deviceram_)));
          set_has_deviceram();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_ip;
        break;
      }

      // optional string ip = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MMachineInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 os = 1;
  if (has_os()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->os(), output);
  }

  // optional string platform = 2;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->platform().data(), this->platform().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->platform(), output);
  }

  // optional string language = 3;
  if (has_language()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->language().data(), this->language().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->language(), output);
  }

  // optional string userId = 4;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->userid(), output);
  }

  // optional string udid = 5;
  if (has_udid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->udid().data(), this->udid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->udid(), output);
  }

  // optional string deviceModel = 6;
  if (has_devicemodel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->devicemodel().data(), this->devicemodel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->devicemodel(), output);
  }

  // optional string deviceSys = 7;
  if (has_devicesys()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->devicesys().data(), this->devicesys().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->devicesys(), output);
  }

  // optional uint32 deviceRam = 8;
  if (has_deviceram()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->deviceram(), output);
  }

  // optional string ip = 9;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->ip(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MMachineInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 os = 1;
  if (has_os()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->os(), target);
  }

  // optional string platform = 2;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->platform().data(), this->platform().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->platform(), target);
  }

  // optional string language = 3;
  if (has_language()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->language().data(), this->language().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->language(), target);
  }

  // optional string userId = 4;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->userid(), target);
  }

  // optional string udid = 5;
  if (has_udid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->udid().data(), this->udid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->udid(), target);
  }

  // optional string deviceModel = 6;
  if (has_devicemodel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->devicemodel().data(), this->devicemodel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->devicemodel(), target);
  }

  // optional string deviceSys = 7;
  if (has_devicesys()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->devicesys().data(), this->devicesys().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->devicesys(), target);
  }

  // optional uint32 deviceRam = 8;
  if (has_deviceram()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->deviceram(), target);
  }

  // optional string ip = 9;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->ip(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MMachineInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 os = 1;
    if (has_os()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->os());
    }

    // optional string platform = 2;
    if (has_platform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->platform());
    }

    // optional string language = 3;
    if (has_language()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->language());
    }

    // optional string userId = 4;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }

    // optional string udid = 5;
    if (has_udid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->udid());
    }

    // optional string deviceModel = 6;
    if (has_devicemodel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->devicemodel());
    }

    // optional string deviceSys = 7;
    if (has_devicesys()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->devicesys());
    }

    // optional uint32 deviceRam = 8;
    if (has_deviceram()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deviceram());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string ip = 9;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MMachineInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MMachineInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MMachineInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MMachineInfo::MergeFrom(const MMachineInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_os()) {
      set_os(from.os());
    }
    if (from.has_platform()) {
      set_platform(from.platform());
    }
    if (from.has_language()) {
      set_language(from.language());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_udid()) {
      set_udid(from.udid());
    }
    if (from.has_devicemodel()) {
      set_devicemodel(from.devicemodel());
    }
    if (from.has_devicesys()) {
      set_devicesys(from.devicesys());
    }
    if (from.has_deviceram()) {
      set_deviceram(from.deviceram());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_ip()) {
      set_ip(from.ip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MMachineInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MMachineInfo::CopyFrom(const MMachineInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MMachineInfo::IsInitialized() const {

  return true;
}

void MMachineInfo::Swap(MMachineInfo* other) {
  if (other != this) {
    std::swap(os_, other->os_);
    std::swap(platform_, other->platform_);
    std::swap(language_, other->language_);
    std::swap(userid_, other->userid_);
    std::swap(udid_, other->udid_);
    std::swap(devicemodel_, other->devicemodel_);
    std::swap(devicesys_, other->devicesys_);
    std::swap(deviceram_, other->deviceram_);
    std::swap(ip_, other->ip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MMachineInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MMachineInfo_descriptor_;
  metadata.reflection = MMachineInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SSLogin::kAccountFieldNumber;
const int SSLogin::kGsIdFieldNumber;
const int SSLogin::kBReConnectFieldNumber;
const int SSLogin::kNetIdFieldNumber;
const int SSLogin::kPlayerIdFieldNumber;
const int SSLogin::kGateLineFieldNumber;
const int SSLogin::kChannelFieldNumber;
const int SSLogin::kMachineInfoFieldNumber;
#endif  // !_MSC_VER

SSLogin::SSLogin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SSLogin::InitAsDefaultInstance() {
  machineinfo_ = const_cast< ::lol::MMachineInfo*>(&::lol::MMachineInfo::default_instance());
}

SSLogin::SSLogin(const SSLogin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SSLogin::SharedCtor() {
  _cached_size_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gs_id_ = 0;
  breconnect_ = 0u;
  netid_ = 0u;
  playerid_ = GOOGLE_ULONGLONG(0);
  gateline_ = 0u;
  channel_ = 0u;
  machineinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SSLogin::~SSLogin() {
  SharedDtor();
}

void SSLogin::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (this != default_instance_) {
    delete machineinfo_;
  }
}

void SSLogin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SSLogin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SSLogin_descriptor_;
}

const SSLogin& SSLogin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_simple_2eproto();
  return *default_instance_;
}

SSLogin* SSLogin::default_instance_ = NULL;

SSLogin* SSLogin::New() const {
  return new SSLogin;
}

void SSLogin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    gs_id_ = 0;
    breconnect_ = 0u;
    netid_ = 0u;
    playerid_ = GOOGLE_ULONGLONG(0);
    gateline_ = 0u;
    channel_ = 0u;
    if (has_machineinfo()) {
      if (machineinfo_ != NULL) machineinfo_->::lol::MMachineInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SSLogin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string account = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gs_id;
        break;
      }

      // optional int32 gs_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gs_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gs_id_)));
          set_has_gs_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_bReConnect;
        break;
      }

      // optional uint32 bReConnect = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bReConnect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &breconnect_)));
          set_has_breconnect();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_netId;
        break;
      }

      // optional uint32 netId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_netId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &netid_)));
          set_has_netid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_playerId;
        break;
      }

      // optional uint64 playerId = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_gateLine;
        break;
      }

      // optional uint32 gateLine = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gateLine:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gateline_)));
          set_has_gateline();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_channel;
        break;
      }

      // optional uint32 channel = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_)));
          set_has_channel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_machineInfo;
        break;
      }

      // optional .lol.MMachineInfo machineInfo = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_machineInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_machineinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SSLogin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->account(), output);
  }

  // optional int32 gs_id = 2;
  if (has_gs_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gs_id(), output);
  }

  // optional uint32 bReConnect = 3;
  if (has_breconnect()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->breconnect(), output);
  }

  // optional uint32 netId = 4;
  if (has_netid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->netid(), output);
  }

  // optional uint64 playerId = 5;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->playerid(), output);
  }

  // optional uint32 gateLine = 6;
  if (has_gateline()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->gateline(), output);
  }

  // optional uint32 channel = 7;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->channel(), output);
  }

  // optional .lol.MMachineInfo machineInfo = 8;
  if (has_machineinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->machineinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SSLogin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->account(), target);
  }

  // optional int32 gs_id = 2;
  if (has_gs_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gs_id(), target);
  }

  // optional uint32 bReConnect = 3;
  if (has_breconnect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->breconnect(), target);
  }

  // optional uint32 netId = 4;
  if (has_netid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->netid(), target);
  }

  // optional uint64 playerId = 5;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->playerid(), target);
  }

  // optional uint32 gateLine = 6;
  if (has_gateline()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->gateline(), target);
  }

  // optional uint32 channel = 7;
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->channel(), target);
  }

  // optional .lol.MMachineInfo machineInfo = 8;
  if (has_machineinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->machineinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SSLogin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string account = 1;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional int32 gs_id = 2;
    if (has_gs_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gs_id());
    }

    // optional uint32 bReConnect = 3;
    if (has_breconnect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->breconnect());
    }

    // optional uint32 netId = 4;
    if (has_netid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->netid());
    }

    // optional uint64 playerId = 5;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->playerid());
    }

    // optional uint32 gateLine = 6;
    if (has_gateline()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gateline());
    }

    // optional uint32 channel = 7;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel());
    }

    // optional .lol.MMachineInfo machineInfo = 8;
    if (has_machineinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->machineinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SSLogin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SSLogin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SSLogin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SSLogin::MergeFrom(const SSLogin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_gs_id()) {
      set_gs_id(from.gs_id());
    }
    if (from.has_breconnect()) {
      set_breconnect(from.breconnect());
    }
    if (from.has_netid()) {
      set_netid(from.netid());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_gateline()) {
      set_gateline(from.gateline());
    }
    if (from.has_channel()) {
      set_channel(from.channel());
    }
    if (from.has_machineinfo()) {
      mutable_machineinfo()->::lol::MMachineInfo::MergeFrom(from.machineinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SSLogin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SSLogin::CopyFrom(const SSLogin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSLogin::IsInitialized() const {

  return true;
}

void SSLogin::Swap(SSLogin* other) {
  if (other != this) {
    std::swap(account_, other->account_);
    std::swap(gs_id_, other->gs_id_);
    std::swap(breconnect_, other->breconnect_);
    std::swap(netid_, other->netid_);
    std::swap(playerid_, other->playerid_);
    std::swap(gateline_, other->gateline_);
    std::swap(channel_, other->channel_);
    std::swap(machineinfo_, other->machineinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SSLogin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SSLogin_descriptor_;
  metadata.reflection = SSLogin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SaveRoleData::kPlayerIdFieldNumber;
const int SaveRoleData::kAccountFieldNumber;
const int SaveRoleData::kLevelFieldNumber;
const int SaveRoleData::kRoleNameFieldNumber;
const int SaveRoleData::kNickNameFieldNumber;
const int SaveRoleData::kCreateTimeFieldNumber;
const int SaveRoleData::kVipLevelFieldNumber;
const int SaveRoleData::kVipExpFieldNumber;
const int SaveRoleData::kDiamondFieldNumber;
const int SaveRoleData::kLoginTimeFieldNumber;
const int SaveRoleData::kOfflineTimeFieldNumber;
const int SaveRoleData::kHeroBagFieldNumber;
const int SaveRoleData::kItemBagFieldNumber;
const int SaveRoleData::kGameCopyFieldNumber;
const int SaveRoleData::kTaskFieldNumber;
const int SaveRoleData::kGameShopFieldNumber;
const int SaveRoleData::kGroupDataFieldNumber;
const int SaveRoleData::kGsIdFieldNumber;
#endif  // !_MSC_VER

SaveRoleData::SaveRoleData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SaveRoleData::InitAsDefaultInstance() {
}

SaveRoleData::SaveRoleData(const SaveRoleData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SaveRoleData::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = GOOGLE_ULONGLONG(0);
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0u;
  rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  createtime_ = GOOGLE_LONGLONG(0);
  viplevel_ = 0u;
  vipexp_ = 0u;
  diamond_ = 0u;
  logintime_ = GOOGLE_LONGLONG(0);
  offlinetime_ = GOOGLE_LONGLONG(0);
  herobag_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  itembag_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gamecopy_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  task_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gameshop_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  groupdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gsid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SaveRoleData::~SaveRoleData() {
  SharedDtor();
}

void SaveRoleData::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete rolename_;
  }
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (herobag_ != &::google::protobuf::internal::kEmptyString) {
    delete herobag_;
  }
  if (itembag_ != &::google::protobuf::internal::kEmptyString) {
    delete itembag_;
  }
  if (gamecopy_ != &::google::protobuf::internal::kEmptyString) {
    delete gamecopy_;
  }
  if (task_ != &::google::protobuf::internal::kEmptyString) {
    delete task_;
  }
  if (gameshop_ != &::google::protobuf::internal::kEmptyString) {
    delete gameshop_;
  }
  if (groupdata_ != &::google::protobuf::internal::kEmptyString) {
    delete groupdata_;
  }
  if (this != default_instance_) {
  }
}

void SaveRoleData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SaveRoleData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SaveRoleData_descriptor_;
}

const SaveRoleData& SaveRoleData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_simple_2eproto();
  return *default_instance_;
}

SaveRoleData* SaveRoleData::default_instance_ = NULL;

SaveRoleData* SaveRoleData::New() const {
  return new SaveRoleData;
}

void SaveRoleData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = GOOGLE_ULONGLONG(0);
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    level_ = 0u;
    if (has_rolename()) {
      if (rolename_ != &::google::protobuf::internal::kEmptyString) {
        rolename_->clear();
      }
    }
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::kEmptyString) {
        nickname_->clear();
      }
    }
    createtime_ = GOOGLE_LONGLONG(0);
    viplevel_ = 0u;
    vipexp_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    diamond_ = 0u;
    logintime_ = GOOGLE_LONGLONG(0);
    offlinetime_ = GOOGLE_LONGLONG(0);
    if (has_herobag()) {
      if (herobag_ != &::google::protobuf::internal::kEmptyString) {
        herobag_->clear();
      }
    }
    if (has_itembag()) {
      if (itembag_ != &::google::protobuf::internal::kEmptyString) {
        itembag_->clear();
      }
    }
    if (has_gamecopy()) {
      if (gamecopy_ != &::google::protobuf::internal::kEmptyString) {
        gamecopy_->clear();
      }
    }
    if (has_task()) {
      if (task_ != &::google::protobuf::internal::kEmptyString) {
        task_->clear();
      }
    }
    if (has_gameshop()) {
      if (gameshop_ != &::google::protobuf::internal::kEmptyString) {
        gameshop_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_groupdata()) {
      if (groupdata_ != &::google::protobuf::internal::kEmptyString) {
        groupdata_->clear();
      }
    }
    gsid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SaveRoleData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 playerId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_account;
        break;
      }

      // optional string account = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // optional uint32 level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_roleName;
        break;
      }

      // optional string roleName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roleName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rolename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rolename().data(), this->rolename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_nickName;
        break;
      }

      // optional string nickName = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nickName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_createTime;
        break;
      }

      // optional int64 createTime = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_createTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_vipLevel;
        break;
      }

      // optional uint32 vipLevel = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vipLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &viplevel_)));
          set_has_viplevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_vipExp;
        break;
      }

      // optional uint32 vipExp = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vipExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vipexp_)));
          set_has_vipexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_diamond;
        break;
      }

      // optional uint32 diamond = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_diamond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &diamond_)));
          set_has_diamond();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_loginTime;
        break;
      }

      // optional int64 loginTime = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_loginTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &logintime_)));
          set_has_logintime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_offlineTime;
        break;
      }

      // optional int64 offlineTime = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offlineTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &offlinetime_)));
          set_has_offlinetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_heroBag;
        break;
      }

      // optional bytes heroBag = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_heroBag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_herobag()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_itemBag;
        break;
      }

      // optional bytes itemBag = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_itemBag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_itembag()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_gameCopy;
        break;
      }

      // optional bytes gameCopy = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gameCopy:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_gamecopy()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_task;
        break;
      }

      // optional bytes task = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_task:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_task()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_gameShop;
        break;
      }

      // optional bytes gameShop = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gameShop:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_gameshop()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_groupData;
        break;
      }

      // optional bytes groupData = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_groupData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_groupdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_gsId;
        break;
      }

      // optional uint32 gsId = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gsId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gsid_)));
          set_has_gsid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SaveRoleData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 playerId = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->playerid(), output);
  }

  // optional string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->account(), output);
  }

  // optional uint32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->level(), output);
  }

  // optional string roleName = 4;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->rolename(), output);
  }

  // optional string nickName = 5;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->nickname(), output);
  }

  // optional int64 createTime = 6;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->createtime(), output);
  }

  // optional uint32 vipLevel = 7;
  if (has_viplevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->viplevel(), output);
  }

  // optional uint32 vipExp = 8;
  if (has_vipexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->vipexp(), output);
  }

  // optional uint32 diamond = 9;
  if (has_diamond()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->diamond(), output);
  }

  // optional int64 loginTime = 10;
  if (has_logintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->logintime(), output);
  }

  // optional int64 offlineTime = 11;
  if (has_offlinetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->offlinetime(), output);
  }

  // optional bytes heroBag = 12;
  if (has_herobag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      12, this->herobag(), output);
  }

  // optional bytes itemBag = 13;
  if (has_itembag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      13, this->itembag(), output);
  }

  // optional bytes gameCopy = 14;
  if (has_gamecopy()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      14, this->gamecopy(), output);
  }

  // optional bytes task = 15;
  if (has_task()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      15, this->task(), output);
  }

  // optional bytes gameShop = 16;
  if (has_gameshop()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      16, this->gameshop(), output);
  }

  // optional bytes groupData = 17;
  if (has_groupdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      17, this->groupdata(), output);
  }

  // optional uint32 gsId = 18;
  if (has_gsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->gsid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SaveRoleData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 playerId = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->playerid(), target);
  }

  // optional string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->account(), target);
  }

  // optional uint32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->level(), target);
  }

  // optional string roleName = 4;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->rolename(), target);
  }

  // optional string nickName = 5;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->nickname(), target);
  }

  // optional int64 createTime = 6;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->createtime(), target);
  }

  // optional uint32 vipLevel = 7;
  if (has_viplevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->viplevel(), target);
  }

  // optional uint32 vipExp = 8;
  if (has_vipexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->vipexp(), target);
  }

  // optional uint32 diamond = 9;
  if (has_diamond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->diamond(), target);
  }

  // optional int64 loginTime = 10;
  if (has_logintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->logintime(), target);
  }

  // optional int64 offlineTime = 11;
  if (has_offlinetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->offlinetime(), target);
  }

  // optional bytes heroBag = 12;
  if (has_herobag()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        12, this->herobag(), target);
  }

  // optional bytes itemBag = 13;
  if (has_itembag()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        13, this->itembag(), target);
  }

  // optional bytes gameCopy = 14;
  if (has_gamecopy()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        14, this->gamecopy(), target);
  }

  // optional bytes task = 15;
  if (has_task()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        15, this->task(), target);
  }

  // optional bytes gameShop = 16;
  if (has_gameshop()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        16, this->gameshop(), target);
  }

  // optional bytes groupData = 17;
  if (has_groupdata()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        17, this->groupdata(), target);
  }

  // optional uint32 gsId = 18;
  if (has_gsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->gsid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SaveRoleData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 playerId = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->playerid());
    }

    // optional string account = 2;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional uint32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional string roleName = 4;
    if (has_rolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rolename());
    }

    // optional string nickName = 5;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional int64 createTime = 6;
    if (has_createtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->createtime());
    }

    // optional uint32 vipLevel = 7;
    if (has_viplevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->viplevel());
    }

    // optional uint32 vipExp = 8;
    if (has_vipexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vipexp());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 diamond = 9;
    if (has_diamond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->diamond());
    }

    // optional int64 loginTime = 10;
    if (has_logintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->logintime());
    }

    // optional int64 offlineTime = 11;
    if (has_offlinetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->offlinetime());
    }

    // optional bytes heroBag = 12;
    if (has_herobag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->herobag());
    }

    // optional bytes itemBag = 13;
    if (has_itembag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->itembag());
    }

    // optional bytes gameCopy = 14;
    if (has_gamecopy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->gamecopy());
    }

    // optional bytes task = 15;
    if (has_task()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->task());
    }

    // optional bytes gameShop = 16;
    if (has_gameshop()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->gameshop());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional bytes groupData = 17;
    if (has_groupdata()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->groupdata());
    }

    // optional uint32 gsId = 18;
    if (has_gsid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gsid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SaveRoleData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SaveRoleData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SaveRoleData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SaveRoleData::MergeFrom(const SaveRoleData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_rolename()) {
      set_rolename(from.rolename());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_viplevel()) {
      set_viplevel(from.viplevel());
    }
    if (from.has_vipexp()) {
      set_vipexp(from.vipexp());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_diamond()) {
      set_diamond(from.diamond());
    }
    if (from.has_logintime()) {
      set_logintime(from.logintime());
    }
    if (from.has_offlinetime()) {
      set_offlinetime(from.offlinetime());
    }
    if (from.has_herobag()) {
      set_herobag(from.herobag());
    }
    if (from.has_itembag()) {
      set_itembag(from.itembag());
    }
    if (from.has_gamecopy()) {
      set_gamecopy(from.gamecopy());
    }
    if (from.has_task()) {
      set_task(from.task());
    }
    if (from.has_gameshop()) {
      set_gameshop(from.gameshop());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_groupdata()) {
      set_groupdata(from.groupdata());
    }
    if (from.has_gsid()) {
      set_gsid(from.gsid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SaveRoleData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SaveRoleData::CopyFrom(const SaveRoleData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SaveRoleData::IsInitialized() const {

  return true;
}

void SaveRoleData::Swap(SaveRoleData* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(account_, other->account_);
    std::swap(level_, other->level_);
    std::swap(rolename_, other->rolename_);
    std::swap(nickname_, other->nickname_);
    std::swap(createtime_, other->createtime_);
    std::swap(viplevel_, other->viplevel_);
    std::swap(vipexp_, other->vipexp_);
    std::swap(diamond_, other->diamond_);
    std::swap(logintime_, other->logintime_);
    std::swap(offlinetime_, other->offlinetime_);
    std::swap(herobag_, other->herobag_);
    std::swap(itembag_, other->itembag_);
    std::swap(gamecopy_, other->gamecopy_);
    std::swap(task_, other->task_);
    std::swap(gameshop_, other->gameshop_);
    std::swap(groupdata_, other->groupdata_);
    std::swap(gsid_, other->gsid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SaveRoleData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SaveRoleData_descriptor_;
  metadata.reflection = SaveRoleData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Db2GameLogin::kRoleDataFieldNumber;
const int Db2GameLogin::kNetIdFieldNumber;
const int Db2GameLogin::kGateLineFieldNumber;
const int Db2GameLogin::kReconnectFieldNumber;
const int Db2GameLogin::kChannelFieldNumber;
const int Db2GameLogin::kMachineInfoFieldNumber;
#endif  // !_MSC_VER

Db2GameLogin::Db2GameLogin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Db2GameLogin::InitAsDefaultInstance() {
  roledata_ = const_cast< ::lol::SaveRoleData*>(&::lol::SaveRoleData::default_instance());
  machineinfo_ = const_cast< ::lol::MMachineInfo*>(&::lol::MMachineInfo::default_instance());
}

Db2GameLogin::Db2GameLogin(const Db2GameLogin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Db2GameLogin::SharedCtor() {
  _cached_size_ = 0;
  roledata_ = NULL;
  netid_ = 0u;
  gateline_ = 0u;
  reconnect_ = 0u;
  channel_ = 0u;
  machineinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Db2GameLogin::~Db2GameLogin() {
  SharedDtor();
}

void Db2GameLogin::SharedDtor() {
  if (this != default_instance_) {
    delete roledata_;
    delete machineinfo_;
  }
}

void Db2GameLogin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Db2GameLogin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Db2GameLogin_descriptor_;
}

const Db2GameLogin& Db2GameLogin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_simple_2eproto();
  return *default_instance_;
}

Db2GameLogin* Db2GameLogin::default_instance_ = NULL;

Db2GameLogin* Db2GameLogin::New() const {
  return new Db2GameLogin;
}

void Db2GameLogin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_roledata()) {
      if (roledata_ != NULL) roledata_->::lol::SaveRoleData::Clear();
    }
    netid_ = 0u;
    gateline_ = 0u;
    reconnect_ = 0u;
    channel_ = 0u;
    if (has_machineinfo()) {
      if (machineinfo_ != NULL) machineinfo_->::lol::MMachineInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Db2GameLogin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .lol.SaveRoleData roleData = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_roledata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_netId;
        break;
      }

      // optional uint32 netId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_netId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &netid_)));
          set_has_netid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_gateLine;
        break;
      }

      // optional uint32 gateLine = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gateLine:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gateline_)));
          set_has_gateline();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_reconnect;
        break;
      }

      // optional uint32 reconnect = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reconnect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reconnect_)));
          set_has_reconnect();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_channel;
        break;
      }

      // optional uint32 channel = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_)));
          set_has_channel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_machineInfo;
        break;
      }

      // optional .lol.MMachineInfo machineInfo = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_machineInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_machineinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Db2GameLogin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .lol.SaveRoleData roleData = 1;
  if (has_roledata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->roledata(), output);
  }

  // optional uint32 netId = 2;
  if (has_netid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->netid(), output);
  }

  // optional uint32 gateLine = 3;
  if (has_gateline()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->gateline(), output);
  }

  // optional uint32 reconnect = 4;
  if (has_reconnect()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->reconnect(), output);
  }

  // optional uint32 channel = 5;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->channel(), output);
  }

  // optional .lol.MMachineInfo machineInfo = 6;
  if (has_machineinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->machineinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Db2GameLogin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .lol.SaveRoleData roleData = 1;
  if (has_roledata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->roledata(), target);
  }

  // optional uint32 netId = 2;
  if (has_netid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->netid(), target);
  }

  // optional uint32 gateLine = 3;
  if (has_gateline()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->gateline(), target);
  }

  // optional uint32 reconnect = 4;
  if (has_reconnect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->reconnect(), target);
  }

  // optional uint32 channel = 5;
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->channel(), target);
  }

  // optional .lol.MMachineInfo machineInfo = 6;
  if (has_machineinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->machineinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Db2GameLogin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .lol.SaveRoleData roleData = 1;
    if (has_roledata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->roledata());
    }

    // optional uint32 netId = 2;
    if (has_netid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->netid());
    }

    // optional uint32 gateLine = 3;
    if (has_gateline()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gateline());
    }

    // optional uint32 reconnect = 4;
    if (has_reconnect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reconnect());
    }

    // optional uint32 channel = 5;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel());
    }

    // optional .lol.MMachineInfo machineInfo = 6;
    if (has_machineinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->machineinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Db2GameLogin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Db2GameLogin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Db2GameLogin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Db2GameLogin::MergeFrom(const Db2GameLogin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roledata()) {
      mutable_roledata()->::lol::SaveRoleData::MergeFrom(from.roledata());
    }
    if (from.has_netid()) {
      set_netid(from.netid());
    }
    if (from.has_gateline()) {
      set_gateline(from.gateline());
    }
    if (from.has_reconnect()) {
      set_reconnect(from.reconnect());
    }
    if (from.has_channel()) {
      set_channel(from.channel());
    }
    if (from.has_machineinfo()) {
      mutable_machineinfo()->::lol::MMachineInfo::MergeFrom(from.machineinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Db2GameLogin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Db2GameLogin::CopyFrom(const Db2GameLogin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Db2GameLogin::IsInitialized() const {

  return true;
}

void Db2GameLogin::Swap(Db2GameLogin* other) {
  if (other != this) {
    std::swap(roledata_, other->roledata_);
    std::swap(netid_, other->netid_);
    std::swap(gateline_, other->gateline_);
    std::swap(reconnect_, other->reconnect_);
    std::swap(channel_, other->channel_);
    std::swap(machineinfo_, other->machineinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Db2GameLogin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Db2GameLogin_descriptor_;
  metadata.reflection = Db2GameLogin_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace lol

// @@protoc_insertion_point(global_scope)
